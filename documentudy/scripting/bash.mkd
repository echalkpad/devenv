
# Basic Structure

1. Comment
2. Data Type
3. Print
4. Read
5. Conditional Statement
6. Loops
7. Function
8. Operate



## 1. Comment

````bash
# comment
````

## 2. Data Type
````bash
VAL1="galaxy"	#Do not space around =
VAL2="far away"
VAL3=99
````

$1
$#
$@


## 3. Print

````bash
echo "A long time ago in a $VAL1 far, $VAL2...."
````

## 4. Read

````bash
read IN1 IN2
````


## 5. Conditional Statement

- if statement

````bash
if [[ condition1 ]]	#Need to space inside of parenthesis
then
	echo "condition 1"
elif [[ condition2 ]]
then
	echo "condition 2"
else
	echo "else"
fi

````
- case statement
````bash
case "$1" in
	-i)
		echo "$1 is info"
		;;
	-h)
		echo "$1 is help"
		;;
	"")
		echo "no argument"
		;;
	*)
		echo "else"
		;;
esac
````

## 6. Loops

- for loop
````bash
for i in "$v1" "v2" "v3" ... "$vN"
do
	echo $i
done
````

- while loop
````bash
while [ condition ]
do
	echo
done
````
- break and continue
````bash
for i in {1...10}
do
	if [ $i == '3' ]
	then
		continue	# skip this loop
	elif [ $i == '9' ]
		break		# finish loop
	fi
	echo $i
done
````

## 7. Function

- Two type of function declare
````bash
foo ()		# no needs to write argument information
{
	echo "$1 $2"	# will be automatically parameter
}

# Only for bash not sh
function foo ()
{
	...
}
````

- local variable
````bash
foo ()
{
	local AA=100
}
````

- get return value and send parameter from fuction add

````bash
RET=$(add 4 5)
echo $RET		#9
````



## 8. Operate

- Arithmetic operation

1. double parentheses
````bash
RET=$(($VAL3 + 1))
echo $RET	#100
````
2. let expression
````bash
let a=$VAL3+1		#Do not space every operator
let a++
let "a = a * 2"		#Allowed space
echo $a			#202
````
3. expr expression
calculate without variable
````bash
expr $VAL3 + 1		#100
expr 5 + 4		#9
a=$(expr 10+2)
echo $a			#12
````

